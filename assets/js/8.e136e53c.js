(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{449:function(t,i,e){"use strict";e.r(i);var l=e(25),a=Object(l.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" GIT")]),t._v(" "),e("h2",{attrs:{id:"command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#command"}},[t._v("#")]),t._v(" Command")]),t._v(" "),e("ul",[e("li",[t._v("git log --branches --graph --decorate --oneline")]),t._v(" "),e("li",[t._v("git log --decorate --all --oneline")]),t._v(" "),e("li",[t._v("git log --branches --graph --decorate")]),t._v(" "),e("li",[t._v("git reset --hard {commit-hashcode}")]),t._v(" "),e("li",[t._v("git reset --hard ORIG_HEAD")]),t._v(" "),e("li",[t._v("git reflog")]),t._v(" "),e("li",[t._v("git check out {commit-hashcode}\n"),e("ul",[e("li",[t._v("특정 commit을 checkout 할 수도있음")])])]),t._v(" "),e("li",[t._v("git diff\n"),e("ul",[e("li",[t._v("working copy 와 index 비교")])])]),t._v(" "),e("li",[t._v("git add")]),t._v(" "),e("li",[t._v("git commit")]),t._v(" "),e("li",[t._v("git commit -am\n"),e("ul",[e("li",[t._v("add 와 commit message 를 동시에, but 최초 add 는 실행한 상태에서")])])]),t._v(" "),e("li",[t._v("git checkout -b {name}\n"),e("ul",[e("li",[t._v("branch")])])]),t._v(" "),e("li",[t._v("git log --reverse\n"),e("ul",[e("li",[t._v("git log를 거꾸로 출력하기")])])]),t._v(" "),e("li",[t._v("git commit --amend\n"),e("ul",[e("li",[t._v("commit 변경")])])]),t._v(" "),e("li",[t._v("git log --decorate --graph")]),t._v(" "),e("li",[t._v("ORIG_HEAD 병합 이전의 커밋 -> 원복할 수 있음")])]),t._v(" "),e("h2",{attrs:{id:"fetch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#fetch"}},[t._v("#")]),t._v(" fetch")]),t._v(" "),e("ul",[e("li",[t._v("git fetch\n"),e("ul",[e("li",[t._v("pull 과 달리 HEAD를 변경하지 않는다.")]),t._v(" "),e("li",[t._v("git log --decorate --all --oneline 으로 확인.")])])]),t._v(" "),e("li",[t._v("git diff HEAD origin/master\n"),e("ul",[e("li",[t._v("fetch 후에 원격저장소의 내용과 비교할 수 있음")])])]),t._v(" "),e("li",[t._v("git merge origin/master")])]),t._v(" "),e("h2",{attrs:{id:"원격저장소"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#원격저장소"}},[t._v("#")]),t._v(" 원격저장소")]),t._v(" "),e("ul",[e("li",[t._v("git init --bare {name}")]),t._v(" "),e("li",[e("ol",[e("li",[t._v("git remote add origin git@github.com:user/myrepo.git")])]),t._v(" "),e("ul",[e("li",[t._v("현재 저장소에 origin(별명) 이름으로 경로의 원격저장소를 추가한다.")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("git push --set-upstream origin master")])]),t._v(" "),e("ul",[e("li",[t._v("git push -u origin master")]),t._v(" "),e("li",[t._v("원격저장소와 연결 and 업로드")])])]),t._v(" "),e("li",[t._v("git remote -v\n"),e("ul",[e("li",[t._v("정보확인")])])]),t._v(" "),e("li",[t._v("git push")])]),t._v(" "),e("h2",{attrs:{id:"merge-tool-kdiff3-beyond-compare"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#merge-tool-kdiff3-beyond-compare"}},[t._v("#")]),t._v(" Merge Tool (kdiff3, Beyond Compare)")]),t._v(" "),e("ul",[e("li",[t._v("git config --global merge.tool kdiff3")]),t._v(" "),e("li",[t._v("git config --global merge.tool bc")]),t._v(" "),e("li",[t._v("git mergetool")])]),t._v(" "),e("h2",{attrs:{id:"annotated-tag"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#annotated-tag"}},[t._v("#")]),t._v(" annotated tag")]),t._v(" "),e("ul",[e("li",[t._v('git tag -a 1.1.0 -m "bug fix"')]),t._v(" "),e("li",[t._v("git tag -v 1.1.0")]),t._v(" "),e("li",[t._v("git push --tags")])])])}),[],!1,null,null,null);i.default=a.exports}}]);